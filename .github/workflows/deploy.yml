name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm install -g typescript
          npm install --legacy-peer-deps three @react-three/fiber @react-three/drei @types/three

      - name: Create env file
        env:
          API_KEY: ${{ secrets.VITE_OPENROUTER_API_KEY }}
          DB_URL: ${{ secrets.VITE_SUPABASE_URL }}
          DB_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        run: |
          # Create env file from secrets
          touch .env
          echo "VITE_OPENROUTER_API_KEY=$API_KEY" >> .env
          echo "VITE_OPENROUTER_ENDPOINT=https://openrouter.ai/api/v1" >> .env
          echo "VITE_SUPABASE_URL=$DB_URL" >> .env
          echo "VITE_SUPABASE_ANON_KEY=$DB_KEY" >> .env
          echo "VITE_MAX_MESSAGES_PER_DAY=5" >> .env
          echo "VITE_ENABLE_VOICE=true" >> .env

          # Debug: Show env file exists (without content)
          ls -la .env

      - name: Build
        env:
          NODE_ENV: production
        run: |
          # Show environment variables (excluding secrets)
          echo "Build environment:"
          echo "NODE_ENV: $NODE_ENV"
          echo "VITE_OPENROUTER_ENDPOINT: $VITE_OPENROUTER_ENDPOINT"
          echo "VITE_MAX_MESSAGES_PER_HOUR: $VITE_MAX_MESSAGES_PER_HOUR"
          echo "VITE_ENABLE_VOICE: $VITE_ENABLE_VOICE"
          
          # Show npm and node versions
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          
          # Check if API key is properly set (without revealing the key)
          if [ -z "$VITE_OPENROUTER_API_KEY" ]; then
            echo "ERROR: VITE_OPENROUTER_API_KEY is not set!"
          else
            echo "VITE_OPENROUTER_API_KEY is set (length: ${#VITE_OPENROUTER_API_KEY})"
          fi
          
          # List package.json dependencies
          echo "Package dependencies:"
          grep -A 20 '"dependencies"' package.json
          
          # Create production-specific build script
          echo '{
            "name": "build:prod",
            "command": "vite build --config vite.config.js --mode production"
          }' > prod-build.json
          echo "Using production build configuration:"
          cat vite.config.js
          
          # Create special build script that uses main.prod.tsx
          cat > build-prod.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          
          // Create backup of original main.tsx
          fs.copyFileSync(
            path.resolve(__dirname, 'src/main.tsx'),
            path.resolve(__dirname, 'src/main.tsx.bak')
          );
          
          // Replace with production version
          fs.copyFileSync(
            path.resolve(__dirname, 'src/main.prod.tsx'),
            path.resolve(__dirname, 'src/main.tsx')
          );
          
          console.log('Production entry point configured');
          EOL
          
          # Setup production build
          node build-prod.js
          
          # Run production build with additional flags
          export NODE_ENV=production
          npm run build || {
            echo "Standard build failed. Trying with additional flags..."
            NODE_OPTIONS=--max_old_space_size=4096 npm run build
          } || {
            echo "Build failed. Checking for TypeScript errors..."
            npx tsc --noEmit
            echo "Checking for other build issues..."
            npm run build --verbose
            exit 1
          }

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
